%module{Perl::JIT};

#include "pj_types.h"
#include "xsp_typedefs.h"


%package{Perl::JIT::Types};

SV *
minimal_covering_type(std::vector<Perl::JIT::AST::Type *> types)
  %code{%
    PerlJIT::AST::Type *t = PerlJIT::AST::minimal_covering_type(types);
    if (t) {
      RETVAL = newSV(0);
      sv_setref_pv( RETVAL, xsp_constructor_class(t->perl_class()), (void*)t );
    }
    else {
      RETVAL = &PL_sv_undef;
    }
  %};

%package{Perl::JIT};

class Perl::JIT::AST::Type {
  pj_type_id tag();

  bool equals(Perl::JIT::AST::Type *type) const;

  bool is_scalar();
  bool is_array();
  bool is_hash();
  bool is_opaque();
  bool is_unspecified();

  bool is_xv() const;
  bool is_integer() const;
  bool is_numeric() const;

  std::string to_string() const;

};


class Perl::JIT::AST::Scalar : public Perl::JIT::AST::Type {
  Scalar(pj_type_id tag);
};


class Perl::JIT::AST::Array : public Perl::JIT::AST::Type {
  Array(Perl::JIT::AST::Type *element);
  Perl::JIT::AST::Type *element();
};


class Perl::JIT::AST::Hash : public Perl::JIT::AST::Type {
  Hash(Perl::JIT::AST::Type *element);
  Perl::JIT::AST::Type *element();
};
